<?php

/**
 * @file
 * Functions to support theming in the Bartik theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use \Drupal\block_content\BlockContentInterface;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\media\Entity\Media;
use Drupal\file\Entity\File;
use Drupal\node\Entity\Node;

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function newhomes_preprocess_html(&$variables) {

}

/**
 * Implements hook_preprocess_HOOK() for page title templates.
 */
function newhomes_preprocess_page_title(&$variables) {
}

/**
 * Implements hook_preprocess_HOOK() for maintenance-page.html.twig.
 */
function newhomes_preprocess_maintenance_page(&$variables) {
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function newhomes_preprocess_node(&$variables) {
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function newhomes_preprocess_block(&$variables) {
    $variables['base_path'] = base_path();
    $content = $variables['elements']['content'];

    // Page title
    $request = \Drupal::request();
    $route_match = \Drupal::routeMatch();
    $route = \Drupal::routeMatch()->getCurrentRouteMatch()->getRouteObject();
    $variables['page_title'] = $route->getDefault('_title');
    if (isset($content['#block_content']) && $content['#block_content'] instanceof BlockContentInterface) {
        $blockType = $content['#block_content']->bundle();

    }
}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function newhomes_preprocess_menu(&$variables) {
}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function newhomes_preprocess(&$variables) {
    // Get path logo
    $variables['logo'] = file_url_transform_relative(file_create_url(theme_get_setting('logo.url')));
}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function newhomes_preprocess_views_view(&$variables) {
    $view = $variables['view'];
    $id = $view->id();
    $name = $variables['display_id'];

    if ($name == 'block_1' && $id == 'node_front_page') {
        $variables['items'] = [];
        $langCode = \Drupal::languageManager()->getCurrentLanguage()->getId();
        foreach ($view->result as $key => $result){
            $nid = $result->_entity->nid->value;
            $node = Node::load($nid);
            $trans = $node->getTranslation($langCode);

            // TITLE
            if (!empty($result->_entity->title)) {
                if ($node->hasTranslation($langCode)) {
                    $title = $trans->getTitle();
                }
            } else {
                $title = '';
            }

            // IMG
            if (!empty($result->_entity->field_image)) {
                $uri = \Drupal\file\Entity\File::load($result->_entity->field_image[0]->target_id)->uri->value;
                $alt = $result->_entity->field_image[0]->alt;
            } else {
                $uri = '';
                $alt = '';
            }

            // Number
            if (!empty($result->_entity->field_number)) {
                $number = $trans->field_number->value;
            }

            $variables['items'][] = [
                'alt' => $alt,
                'uri' => $uri,
                'title' => $title,
                'number' => $number
            ];

        }
    }

    if ($name == 'page_1' && $id == 'node_front_page') {
        $variables['items'] = [];
        $langCode = \Drupal::languageManager()->getCurrentLanguage()->getId();

        foreach ($view->result as $key => $result){
            $nid = $result->_entity->nid->value;
            $node = Node::load($nid);
            $trans = $node->getTranslation($langCode);

            // TITLE
            if (!empty($result->_entity->title)) {
                if ($node->hasTranslation($langCode)) {
                    $title = $trans->getTitle();
                }
            } else {
                $title = '';
            }

            // IMG
            if (!empty($result->_entity->field_image)) {
                $uri = \Drupal\file\Entity\File::load($result->_entity->field_image[0]->target_id)->uri->value;
                $alt = $result->_entity->field_image[0]->alt;
            } else {
                $uri = '';
                $alt = '';
            }

            // body
            if (!empty($result->_entity->body)) {
                $nid = $result->_entity->nid->value;
                $node = Node::load($nid);
                
                $langCode = \Drupal::languageManager()->getCurrentLanguage()->getId();
                $trans = $node->getTranslation($langCode);
                $body = $trans->body->value;
                // $summary = $result->_entity->body->summary;
            }

            // Number
            if (!empty($result->_entity->field_number)) {
                $number = $trans->field_number->value;
            }

            $variables['items'][] = [
                'alt' => $alt,
                'uri' => $uri,
                'title' => $title,
                'number' => $number,
                'body' => $body
            ];
        }
    }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function newhomes_theme_suggestions_form_alter(array &$suggestions, array $variables) {
}

/**
 * Implements hook_form_alter() to add classes to the search form.
 */
function newhomes_form_alter(&$form, FormStateInterface $form_state, $form_id) {
}

/**
 * Implements hook_theme_suggestions_block_alter() to add classes to the search form.
 */
function newhomes_theme_suggestions_block_alter(array &$suggestions, array $variables)
{
  // Block suggestions for custom block bundles.
    if (isset($variables['elements']['content']['#block_content'])) {
        array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
    }
}
